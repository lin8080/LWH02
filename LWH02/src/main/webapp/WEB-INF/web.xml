<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
	
	<!-- ①启动Spring的容器 -->
   <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring.xml</param-value>
    </context-param>
   
    <!--②负责启动spring容器的监听器，它将使用①处的上下文参数获得spring配置文件地址-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
       
    
    <!-- 2.SpringMVC的前端控制器  拦截所有请求 -->
	<!--配置springmvc的前端控制器，是一个servlet： DispatcherServlet-->
	<!--前端控制器：处理请求、响应。如果要用springmvc的任何功能，请求必须经过当前前端控制器。-->
	<!--/ 表示拦截所有的请求。-->
	<!--如果是*.do 表示拦截所有以.do作为后缀的请求。-->
    <servlet>  
		<servlet-name>dispatch</servlet-name>  
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>  
		<!-- 指定SpringMVC的配置文件，在与web同级文件下建立一个与servlet-name同名+servlet的xml文件 -->
		<init-param>  
            <param-name>contextConfigLocation</param-name>  
            <param-value>classpath:springmvc.xml</param-value>  
        </init-param>
		<!--启动初始化,数字越小越先加载. 此时servlet就在启动时候就创建了-->
		<load-on-startup>1</load-on-startup>
	</servlet>  
	<servlet-mapping>  
			<servlet-name>dispatch</servlet-name>  
			<url-pattern>/</url-pattern>  
	</servlet-mapping>

	
	<!-- 字符编码过滤器  放在所有过滤器前-->
	<!-- Spring字符编码过滤器：解决中文乱码问题 -->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<!--要使用的字符集，一般我们使用UTF-8(保险起见UTF-8最好)-->
		<init-param>
				<param-name>encoding</param-name>
				<param-value>utf-8</param-value>
		</init-param>
		<!--是否强制设置request的编码为encoding，默认false-->
		<init-param>
				<param-name>forceRequestEncoding</param-name>
				<param-value>true</param-value>
		</init-param>
		<!--是否强制设置response的编码为encoding，建议设置为true-->
		<init-param>
				<param-name>forceResponseEncoding</param-name>
				<param-value>true</param-value>
		</init-param>
		
	</filter>
	
	<filter-mapping>
			<filter-name>CharacterEncodingFilter</filter-name>
			<url-pattern>/*</url-pattern>
	</filter-mapping>



	<!-- 使用REST风格的URI -->
	<!-- 
 		 配置org.springframework.web.filter.HiddenHttpMethodFilter:可以把PUT请求转为DELETE或POST请求
         form表单只支持GET与POST请求，而DELETE、PUT等method并不支持，这个过滤器使得支持GET、POST、PUT与DELETE请求
   -->
   <filter>
             <filter-name>HiddenHttpMethodFilter</filter-name>
   			<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
   
   </filter>
   <filter-mapping>
   			<filter-name>HiddenHttpMethodFilter</filter-name>
   			<!-- 过滤所有请求 -->
   			<url-pattern>/*</url-pattern>
   </filter-mapping>

   
   
   <!--
       使页面ajax成功发put请求
   	   在Spring MVC过滤器-HiddenHttpMethodFilter中我们提到，
   	   jsp或者说html中的form的method值只能为post或get，我们可以通过HiddenHttpMethodFilter获取put表单中的参数-值，
   	   而在Spring3.0中获取put表单的参数-值还有另一种方法，即使用HttpPutFormContentFilter过滤器。
       HttpPutFormContentFilter过滤器的作为就是获取put表单的值，并将之传递到Controller中标注了method为RequestMethod.put的方法中。
   	-->
   <filter>
   		<filter-name>HttpPutFormContentFilter</filter-name>
   		<filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>
   </filter>
   
   <filter-mapping>
   		<filter-name>HttpPutFormContentFilter</filter-name>
   		<url-pattern>/*</url-pattern>
   </filter-mapping>

   <!--	设置项目启动页-->
	<welcome-file-list>
		<welcome-file>/main.jsp</welcome-file>
	</welcome-file-list>


   
   
	</web-app>